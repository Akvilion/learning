name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  terraform:

    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.2.5
        terraform_wrapper: false

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      working-directory: ./terraform
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: ./terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      working-directory: ./terraform

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      continue-on-error: true
      working-directory: ./terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
    - name: Terraform Apply
      id: apply
      run: |
        terraform apply -auto-approve -input=false
        echo "EC2_IP=$(terraform output -raw ec2_ip)" >> $GITHUB_ENV
      working-directory: ./terraform
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Use EC2 IP
      run: echo "The EC2 IP is ${{ env.EC2_IP }}"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Store data in AWS SSM
      run: |
        aws ssm put-parameter --name "/my-app/key" --value ${{ env.EC2_IP }} --type "SecureString"


  build-and-test:
    needs: terraform
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Build Docker Image
      run: |
        docker build -t user/app:latest task_1/flask_web_app/
    
    - name: Run tests
      run: |
        docker run --name flask-app user/app:latest python -m unittest test_app

  push-to-ecr:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: x1
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG task_1/flask_web_app/
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-to-ec2:
    needs: push-to-ecr
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Get data from AWS SSM
      run: |
        value=$(aws ssm get-parameter --name "/my-app/key" --with-decryption --query "Parameter.Value" --output text)
        echo "HOST_VALUE=$value" >> $GITHUB_ENV

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      with:
        host: ${{ env.HOST_VALUE }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          sudo apt update && sudo apt install -y awscli || true
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID  || true
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY  || true
          aws configure set default.region $AWS_REGION  || true
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 643623638664.dkr.ecr.us-east-1.amazonaws.com  || true
          docker stop my_flask_app || true
          docker rm my_flask_app || true
          docker pull 643623638664.dkr.ecr.us-east-1.amazonaws.com/learning:x1
          docker run -d -p 80:5000 --name my_flask_app 643623638664.dkr.ecr.us-east-1.amazonaws.com/learning:x1
