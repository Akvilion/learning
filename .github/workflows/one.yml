name: CI/CD Pipeline

on:
  push:
    branches:
      - one


jobs:
  create_ecr_repo:
    runs-on: ubuntu-latest
    
    steps:

    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true
      working-directory: ./terraform

    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: ./terraform


    - name: List files
      run: ls -l ./terraform

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color


    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      continue-on-error: true
      working-directory: ./terraform
  
    - name: Terraform Apply
      id: apply
      run: terraform apply -auto-approve -input=false
      working-directory: ./terraform


  build_and_test:
    needs: create_ecr_repo
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Build Docker Image
      run: docker build -t user/app:latest task_1/flask_web_app/
    
    - name: Run tests
      run: docker run --name flask-app user/app:latest python -m unittest test_app


  # push_image_to_ecr:
  #   needs: build_amd_test
  #   runs-on: ubuntu-latest
  #   steps:

  #   - name: Checkout repository
  #     uses: actions/checkout@v3

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v1
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: ${{ secrets.AWS_REGION }}

  #   - name: Login to Amazon ECR
  #     id: login-ecr
  #     uses: aws-actions/amazon-ecr-login@v1    
    
  #   - name: Build, tag, and push image to Amazon ECR
  #     env:
  #       ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  #       ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  #       IMAGE_TAG: latest
  #     run: |
  #       docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG task_1/flask_web_app/
  #       docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


  create_ecs_cluster:
    runs-on: ubuntu-latest
    needs: build_and_test
    # needs: push_image_to_ecr
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true
      working-directory: ./terraform2

    - name: Terraform Init
      id: init
      run: terraform init
      working-directory: ./terraform2

    - name: List files
      run: ls -l ./terraform2

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      continue-on-error: true
      working-directory: ./terraform2
  
    - name: Terraform Apply
      id: apply
      run: terraform apply -auto-approve -input=false
      working-directory: ./terraform2